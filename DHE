import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import javax.crypto.interfaces.*;

public class DHExample {
    public static void main(String[] args) throws Exception {
        KeyPairGenerator kpgA = KeyPairGenerator.getInstance("DiffieHellman");
        kpgA.initialize(2048);
        KeyPair kpA = kpgA.generateKeyPair();

        DHParameterSpec dp = ((DHPublicKey) kpA.getPublic()).getParams();
        KeyPairGenerator kpgB = KeyPairGenerator.getInstance("DiffieHellman");
        kpgB.initialize(dp);
        KeyPair kpB = kpgB.generateKeyPair();

        KeyAgreement kaA = KeyAgreement.getInstance("DiffieHellman");
        kaA.init(kpA.getPrivate());
        kaA.doPhase(kpB.getPublic(), true);
        byte[] sA = kaA.generateSecret();

        KeyAgreement kaB = KeyAgreement.getInstance("DiffieHellman");
        kaB.init(kpB.getPrivate());
        kaB.doPhase(kpA.getPublic(), true);
        byte[] sB = kaB.generateSecret();

        System.out.println("A: " + toHex(sA));
        System.out.println("B: " + toHex(sB));
        System.out.println("Match: " + MessageDigest.isEqual(sA, sB));
    }

    private static String toHex(byte[] b) {
        StringBuilder sb = new StringBuilder();
        for (byte x : b) sb.append(String.format("%02X", x));
        return sb.toString();
    }
}
